const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const dataCreator = require('./dataCreator');

const adapter = new FileSync('data/data.json');
const db = low(adapter);

// Sets up database with some entry/s if the database file does not exist yet
db.defaults({
	contracts: [
		{
			id: '814c099a-3fb4-497a-91b7-3a2dd1434bbc', // an example id generated by uuidv4
			state: 'DRAFT', // using a string to determine if DRAFT or ACTIVE instead of bool, incase we want additional states in the future
			header: {
				name: 'Luke',
				address: 'Melbourne'
			},
			lines: [
				{ text: 'Line 0', originalValue: 1000, currentValue: 1000 },
				{ text: 'Line 1', originalValue: 2000, currentValue: 2000 },
			]
		}
	],
	claims: [
		{
			id: '0bb76779-ce50-48cf-a65a-d0dc3d84393a', // an example id generated by uuidv4
			contractId: '814c099a-3fb4-497a-91b7-3a2dd1434bbc',
			state: 'DRAFT',
			respondent: 'Luke',
			claimant: 'Jeff',
			lines: [
				{ lineIndex: 0, claimAmount: 500 },
				{ lineIndex: 1, claimAmount: 1000 }
			]
		}
	]
}).write();

const searchContracts = (data) => {
	// Matching for a provided 'name' field and an 'address' field within the header field (case insensitive)
	return db.get('contracts').filter(({ header }) => {
		return (data.name ? header.name.toLowerCase().includes(data.name.toLowerCase()) : true) &&
			(data.address ? header.address.toLowerCase().includes(data.address.toLowerCase()) : true);
	}).value();
};

const getContract = (id) => {
	return db.get('contracts').find({ id }).value();
};

const putContract = (id, data) => {
	const contract = getContract(id);

	// Throw an error if the id provided does not refer to an existing document
	if (!contract) {
		throw new Error('Error: Cannot find contract.');
	}

	// Setting the data id to the contract's id so it remains consistent
	data.id = contract.id;

	return db.get('contracts')
		.find({ id })
		.assign(data)
		.write();
};

const postContract = (data) => {
	const contract = dataCreator.createContract(data);
	db.get('contracts')
		.push(contract)
		.write();

	return contract;
};

const deleteContract = (id) => {
	return db.get('contracts')
		.remove({ id })
		.write();
};

const searchClaims = (data) => {
	// Matching for a provided 'respondent' field and a 'claimant' field within the claim (case insensitive)
	return db.get('claims').filter(({ respondent, claimant }) => {
		return (data.respondent ? respondent.toLowerCase().includes(data.respondent.toLowerCase()) : true) &&
			(data.claimant ? claimant.toLowerCase().includes(data.claimant.toLowerCase()) : true);
	}).value();
};

const getClaim = (id) => {
	return db.get('claims').find({ id }).value();
};

const putClaim = (id, data) => {
	const claim = getClaim(id);

	// Throw an error if the id provided does not refer to an existing document
	if (!claim) {
		throw new Error('Error: Cannot find claim.');
	}

	switch (data.state) {
		case 'DRAFT': {
			throw new Error('Error: You cannot set a claim back to a DRAFT state.');
		}

		case 'SUBMITTED': {
			if (claim.state !== 'DRAFT') {
				throw new Error('Error: You can only update a claim to SUBMITTED if it is in a DRAFT state.');
			}
			claim.state = data.state; // Change the claim state
			break;
		}

		case 'APPROVED': {
			if (claim.state !== 'SUBMITTED') {
				throw new Error('Error: You can only update a claim to APPROVED if it is in a SUBMITTED state.');
			}

			const updatedContract = getContract(claim.contractId);
			claim.lines.forEach((claimLine) => {
				updatedContract.lines[claimLine.lineIndex].currentValue -= claimLine.claimAmount;
			});

			// Update the contract with the new lines
			putContract(updatedContract.id, updatedContract);

			claim.state = data.state; // Change the claim state
			break;
		}

		default: {
			throw new Error('Error: Provided state was invalid or missing.');
		}
	}

	// Write the changes into the database
	return db.get('claims')
		.find({ id })
		.assign(claim)
		.write();
};

const postClaim = (data) => {

	const contract = getContract(data.contractId);

	if (!contract) {
		throw new Error('Error: Provided contractId does not exist.');
	}

	const claim = dataCreator.createClaim(data, contract);
	db.get('claims')
		.push(claim)
		.write();
	return claim;
};

const deleteClaim = (id) => {
	return db.get('claims')
		.remove({ id })
		.write();
};

module.exports = {
	searchContracts,
	getContract,
	putContract,
	postContract,
	deleteContract,
	searchClaims,
	getClaim,
	putClaim,
	postClaim,
	deleteClaim
};
